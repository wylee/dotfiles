# ~/.bashrc: executed by bash for non-login shells.

# If not running interactively, don't do anything.
[ -z "$PS1" ] && return

# Prevent file overwrite on stdout redirection.
set -o noclobber

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Make less more friendly for non-text input files; see lesspipe(1).
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

set -o vi
bind -m vi-insert "\C-l":clear-screen
export EDITOR=vim

# Add /usr/local/bin if it's not already in $PATH.
if [ -d "/usr/local/bin" ]; then
    echo "$PATH" | grep "/usr/local/bin" 1>/dev/null || export PATH="/usr/local/bin:${PATH}"
fi

# The local bin directory takes precedence over everything else, no
# matter what.
LOCAL_BIN_DIR="${HOME}/.local/bin"
if [ -d "${LOCAL_BIN_DIR}" ]; then
    echo "$PATH" | grep "${LOCAL_BIN_DIR}" 1>/dev/null || export PATH="${LOCAL_BIN_DIR}:${PATH}"
fi

# Aliases
alias back='cd -'

alias j='jobs'
alias 1='%1'
alias 2='%2'
alias 3='%3'
alias 4='%4'
alias 5='%5'
alias 6='%6'
alias 7='%7'
alias 8='%8'
alias 9='%9'

alias ls='/bin/ls -F --color'
alias lsa='/bin/ls -aF --color'
alias lsl='/bin/ls -lF --color'
alias lsal='/bin/ls -alF --color'

# Go up one or directories
# Less tedious than `cd ../../../../...`
function up {
    times=${1:-1}
    dir="$(pwd)"
    for (( i=0; i<times; ++i )); do
        dir="$(dirname $dir)"
    done
    cd "${dir}"
}

function x {
    local j="$(jobs)"
    if [ "$j" ]; then
        echo "There are jobs running (kill them or use exit directly):"
        echo "${j}"
        return 1
    fi
    exit
}

# Prompt

# PROMPT_COMMAND is run after every command. This updates the terminal
# window/tab title after every command.
export PROMPT_COMMAND='echo -ne "\033]0;$(hostname -s):$(basename ${PWD})\007"'

# Fancy pants prompt
function _make_ps1 {
    local red='\[\e[0;31m\]'
    local green='\[\e[0;32m\]'
    local blue='\[\e[0;34m\]'
    local cyan='\[\e[0;36m\]'
    local yellow='\[\e[1;33m\]'
    local reset='\[\e[0;0m\]'
    export PS1="\
${yellow}SERVER ${red}\$(_ps1_hr)
${blue}\d \t
${red}\u${yellow}@${green}\H
${cyan}\w
${yellow}>${reset} \
"
}

function _ps1_hr {
    printf '^%.0s' $(seq $((${COLUMNS} - 7)))
}

_make_ps1
