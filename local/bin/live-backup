#!/usr/local/bin/python3
import argparse
import collections
import configparser
import glob
import os
import subprocess
import sys


default_config_file = '~/.live-backup.cfg'
default_project_dir = os.environ.get('PROJECT_DIR', '~/Projects')


def as_list(v, sep=None):
    return v.strip().split(sep)


def path_type(val):
    val = os.path.expanduser(val)
    return val


arg_parser = argparse.ArgumentParser()
arg_parser.add_argument(
    '--config-file', '-c', type=path_type, default=default_config_file)
arg_parser.add_argument(
    '--list-locations', '-l', action='store_true', default=False,
    help='List available backup locations then exit.')
arg_parser.add_argument('--verbose', '-v', action='store_true', default=False)
arg_parser.add_argument('--dry-run', action='store_true', default=False)
arg_parser.add_argument('--project-dir', '-p', type=path_type, default=None)
arg_parser.add_argument(
    'locations', nargs='*', default=[],
    help='Back up to the specified locations')
args = arg_parser.parse_args()


config_parser = configparser.ConfigParser()
config_parser.read(args.config_file)


available_locations = config_parser.items('available-locations')
available_locations = collections.OrderedDict(
    (k, path_type(v)) for (k, v) in available_locations
)


location_groups = collections.OrderedDict()
if 'location-groups' in config_parser:
    for group, group_locations in config_parser.items('location-groups'):
        group_locations = group_locations.strip().split()
        for group_loc in group_locations:
            if group_loc not in available_locations:
                print('Bad location in {} group: {}'.format(group, group_loc))
                sys.exit(1)
        location_groups[group] = group_locations


def list_available_locations():
    print('Available backup locations:\n')
    for k, v in available_locations.items():
        print('    - {0}: {1}'.format(k, v))
    print('\nLocation groups:\n')
    if location_groups:
        for k, v in location_groups.items():
            print('    - {0}: {1}'.format(k, ', '.join(v)))
    else:
        print('    No location groups')


if args.list_locations:
    list_available_locations()
    sys.exit(0)


if not args.project_dir:
    # Get from config file or fall back to default
    project_dir = config_parser.get(
        'live-backup', 'project-dir', fallback=default_project_dir)
    project_dir = path_type(project_dir)
else:
    project_dir = args.project_dir

paths_in = config_parser.get('live-backup', 'paths')
paths_in = as_list(paths_in)

excludes = config_parser.get('live-backup', 'excludes')
excludes = as_list(excludes)


# Expand input paths:
#   - project_dir is injected
#   - ~ is expanded
#   - shell style globs are too
paths = []
for i, path in enumerate(paths_in):
    path = path.format(project_dir=project_dir)
    path = os.path.expanduser(path)
    glob_paths = glob.glob(path)
    paths += glob_paths
    if not glob_paths:
        print('Path not found: {0}\n'.format(path), file=sys.stderr)


rsync_cmd = ['rsync', '-az', '--delete']
if args.dry_run:
    rsync_cmd.append('--dry-run')
if args.verbose:
    rsync_cmd.append('--verbose')
for e in excludes:
    rsync_cmd += ['--exclude', e]
rsync_cmd.extend(paths)


if args.locations:
    selected_locations = []
    for loc in args.locations:
        if loc in location_groups:
            locations = [available_locations[l] for l in location_groups[loc]]
            selected_locations.extend(locations)
        elif loc in available_locations:
            selected_locations.append(available_locations[loc])
        else:
            print('{0} is not a valid location key\n'.format(e.args[0]))
            list_available_locations()
            sys.exit(1)
else:
    selected_locations = available_locations.values()


for loc in selected_locations:
    print("*> Syncing to {0}...".format(loc))
    cmd = rsync_cmd[:]
    cmd.append(loc)
    print('*> rsync command: {0}\n'.format(' '.join(cmd)))
    return_code = subprocess.call(cmd)
